uniform_float cfg_intensity {
    header = "Configuration";
    default = 6.5;
    min = 0.0;
    max = 20.0;
    step = 0.1;
    display_name = "Intensity";
    description = "Determines the strength of the effect. Higher values make occlusion more blotchy and artificial.";
}

uniform_int cfg_samples {
    default = 30;
    min = 5;
    max = 400;
    step = 1;
    display_name = "Max Samples";
    description = "The maximum number of samples taken per-pixel to determine occlusion. More samples means less visual noise, but worse performance.";
}

uniform_float cfg_radius {
    default = 130.0;
    min = 2.0;
    max = 400.0;
    step = 1.0;
    display_name = "Radius";
    description = "Controls the radius of occlusion effects. Higher values result in fuller and more context-sensitive shadows, at the cost of more noise.";
}

uniform_float cfg_threshold {
    default = 0.0;
    min = -0.15;
    max = 0.15;
    step = 0.01;
    display_name = "Occlusion Threshold";
    description = "The approximate occlusion threshold at which shadowing begins to occur. Lower values cause surfaces without any occlusion to become occluded.";
}

uniform_float cfg_normal_intensity {
    default = 1.0;
    min = 0.0;
    max = 1.0;
    step = 0.05;
    display_name = "Normal Adjustment";
    description = "How strongly surface normals contribute to the occlusion effect. You might want to reduce this setting in the presence of overly strong normal maps.";
}

uniform_float cfg_depth_compensation {
    default = 2.5;
    min = 0.0;
    max = 5.0;
    step = 0.1;
    display_name = "Depth Compensation";
    description = "The extent to which occlusion is affected by the relative depth of the occluding surface. Lower values produce 'occlusion halos' typical of poor early SSAO implementations.";
}

uniform_float cfg_blur_factor {
    default = 1.0;
    min = 0.0;
    max = 1.5;
    step = 0.1;
    display_name = "Blur";
    description = "The amount of blurring applied to the occlusion to reduce visual noise, at the cost of sharpness. Lower values mean more precise occlusion, but increased visual noise.";
}

uniform_float cfg_temporal_filtering {
    default = 0.9;
    min = 0.0;
    max = 1.0;
    step = 0.05;
    display_name = "Temporal Filtering";
    description = "The amount of AO sampling information reused from previous frames. Higher values massively improve AO quality at the cost of minor artifacts on moving scene elements.";
}

uniform_bool cfg_enabled {
    header = "Debugging";
    default = true;
    display_name = "Enabled";
    description = "Whether the effect is enabled. Useful for quick comparisons. If you want to permanently remove the effect, disable the whole shader instead of using this option since it only skips applying occlusion, not the calculation of occlusion.";
}

uniform_bool cfg_debug {
    default = false;
    display_name = "Debug View";
    description = "Makes it easier to see the effect of your configuration changes on the occlusion by removing other lighting effects.";
}

uniform_bool cfg_temporal_filter_when_paused {
    default = false;
    display_name = "Temporal Filter When Paused";
    description = "Enabled temporal filtering even when the game is paused. This has a very minor constant performance overhead.";
}

sampler_2d noise {
    source = "textures/noise.png";
    mag_filter = linear;
    min_filter = linear;
    wrap_s = repeat;
    wrap_t = repeat;
    source_format = red;
    internal_format = red;
    source_type = unsigned_byte;
}

render_target ao_buf0 {
    min_filter = linear;
    mag_filter = linear;
    wrap_s = clamp_to_edge;
    wrap_t = clamp_to_edge;
    width_ratio = 1.0;
    height_ratio = 1.0;
    internal_format = rg;
    source_type = float;
    source_format = rg;
    mipmaps = false;
}

render_target ao_buf1 {
    min_filter = linear;
    mag_filter = linear;
    wrap_s = clamp_to_edge;
    wrap_t = clamp_to_edge;
    width_ratio = 1.0;
    height_ratio = 1.0;
    internal_format = red;
    source_type = float;
    source_format = red;
    mipmaps = false;
}

render_target ao_next {
    min_filter = linear;
    mag_filter = linear;
    wrap_s = clamp_to_edge;
    wrap_t = clamp_to_edge;
    width_ratio = 1.0;
    height_ratio = 1.0;
    internal_format = rg;
    source_type = float;
    source_format = rg;
    mipmaps = false;
}

shared {
    const float UPSCALE = 1.0;
    const float UPSCALE_INV = 1.0 / UPSCALE;

    /* const int N = 7; */
    /* const float kernel[N] = float[](0.0016,    0.0372,    0.2394,    0.4436,    0.2394,    0.0372,    0.0016); */
    /* const float taps[N] = float[](-3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0); */

    /* const int N = 7; */
    /* const float kernel[N] = float[](0.0713,    0.1315,    0.1899,    0.2146,    0.1899,    0.1315,    0.0713); */
    /* const float taps[N] = float[](-3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0); */

    const int N = 5;
    const float kernel[N] = float[](0.1693, 0.2146, 0.2322, 0.2146, 0.1693);
    const float taps[N] = float[](-2.0, -1.0, 0.0, 1.0, 2.0);

    /* const int N = 3; */
    /* const float kernel[N] = float[](0.3195,    0.3611,    0.3195); */
    /* const float taps[N] = float[](-1.0, 0.0, 1.0); */

    const int BOX = 4;
    const float boxx[4] = float[](-1.0,  1.0, -1.0, 1.0);
    const float boxy[4] = float[](-1.0, -1.0,  1.0, 1.0);

    /* const int N = 9; */
    /* const float kernel[N] = float[](0.0002, 0.0060, 0.0606, 0.2417, 0.3829, 0.2417, 0.0606, 0.0060, 0.0002); */
    /* const float taps[N] = float[](-4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0); */

    vec2 rcpResolution = omw.rcpResolution * 1.15 * UPSCALE_INV * cfg_blur_factor;

    vec3 norm_at(vec2 uv) {
        return (omw_Texture2D(omw_SamplerNormals, uv).xyz - 0.5) * 2.0;
    }
}

fragment ssao(target = ao_buf0, rt1 = ao_next) {
    omw_In vec2 omw_TexCoord;

    vec2 norm2_at(vec2 uv) {
        return vec2(omw_Texture2D(omw_SamplerNormals, uv).xy - 0.5) * 2.0;
    }

    #define M1 204766743
    #define M2 388370683
    #define M3 396128171

    float hash_one(int q) {
        int n = ((M3 * q) ^ M2) * M1;
        return float(n) * (1.0 / float(0xffffffffu));
    }
    vec4 hash_one4(ivec4 q) {
        ivec4 n = ((M3 * q) ^ M2) * M1;
        return vec4(n) * (1.0 / float(0xffffffffu));
    }

    float hash_two(uvec2 q) {
        q *= uvec2(M1, M2);
        uint n = q.x ^ q.y;
        n = n * (n ^ (n >> 15));
        return float(n) * (1.0 / float(0xffffffffU));
    }

    float noise_3d(vec3 pos) {
        pos.z *= 25.0;
        int z = int(floor(pos.z));
        vec4 offs = hash_one4(ivec4(z, z + 73, z + 1, z + 74));
        return mix(
            omw_Texture2D(noise, pos.xy + offs.xy).x,
            omw_Texture2D(noise, pos.xy + offs.zw).x,
            fract(pos.z)
        );
    }

    void main() {
        float depth = omw_GetLinearDepth(omw_TexCoord);
        float inv_depth = 1.0 / (depth + 0.001);
        float dist_mul = cfg_radius / (10.0 + pow(depth, 0.75) * 0.15);
        vec2 norm = norm2_at(omw_TexCoord);

        vec3 wpos = omw_GetWorldPosFromUV(omw_TexCoord);
        float marker_d = distance(wpos, omw.eyePos.xyz) * 0.003 + 3.0;
        float marker = mix(
            noise_3d((wpos * 0.01) / floor(marker_d)),
            noise_3d((wpos * 0.01) / floor(marker_d + 1.0)),
            fract(marker_d)
        );

        float ssao = 0.0;
        float total = 0.0;
        // Always apply AO in interiors, and not on the skybox
        if (!omw.isInterior && (depth > omw.far * 0.99
            // AO shouldn't appear underwater if the camera is above water
            || (wpos.z < omw.waterHeight + 1.0 && !omw.isUnderwater)
            // AO shouldn't appear above water if the camera is underwater
            || (wpos.z > omw.waterHeight - 1.0 && omw.isUnderwater)))
        {
            ssao = 1.0;
            total = 1.0;
        } else {
            float t = hash_two(uvec2(omw_TexCoord * omw.resolution));
            if (cfg_temporal_filtering > 0.0) { t += omw.simulationTime * t * 10.0; }
            if (cfg_temporal_filter_when_paused) { t += omw_Texture2D(ao_next, omw_TexCoord).x * 10.0; }
            float stable_samples = 1.0 + float(cfg_samples) * 0.3;
            for (int i = 0; i < cfg_samples && total < stable_samples; i ++) {
                float dist = 0.01 + fract(t * 22.8) * dist_mul;
                vec2 offs = sin(vec2(0.0, 1.571) + t) * 0.01 * dist;
                vec2 pos = omw_TexCoord + offs;

                float depth2 = omw_GetLinearDepth(pos);
                vec2 norm2 = norm2_at(pos);
                float weight = 1.0 / dist;
                float ignore = clamp(abs(1.0 - depth2 * inv_depth) * min(1.0, depth * 0.004) * cfg_depth_compensation, 0.0, 1.0);
                weight *= (1.0 - ignore * 0.5);
                ssao += weight * mix(0.01 / (0.01 + max(dot((norm.xy - norm2), offs), 0.0) * cfg_normal_intensity) + cfg_threshold, 1.0, ignore);
                total += weight;
                t += 3.88;
            }

            if (cfg_temporal_filtering > 0.0) {
                vec4 prev_spos = (omw.projectionMatrix * (omw.prevViewMatrix * vec4(wpos, 1.0)));
                prev_spos.xyz /= prev_spos.w;

                if (abs(prev_spos.x) < 1.0 && abs(prev_spos.y) < 1.0) {
                    vec2 last = omw_Texture2D(ao_next, prev_spos.xy * 0.5 + 0.5).xy;

                    // If the marker was substantially out of range, try to repair the missing information by
                    // 'borrowing' from nearby pixels
                    if (abs(last.y - marker) * inv_depth > 0.00001) {
                        for (int i = 0; i < BOX; i ++) {
                            vec2 last2 = omw_Texture2D(ao_next, prev_spos.xy * 0.5 + 0.5 + omw.rcpResolution * UPSCALE_INV * vec2(boxx[i], boxy[i])).xy;
                            if (abs(last2.y - marker) < abs(last.y - marker)) { last = last2; }
                        }
                    }

                    float ssao_final = ssao / total;
                    if (last.x + last.y > 0.0) {
                        float marker_invalid = abs(last.y - marker) * 2000.0 * sqrt(inv_depth);
                        float result_changed = max(abs(ssao_final - last.x) - 0.0, 0.0);
                        float temporal_factor = max(mix(0.8, 0.999, cfg_temporal_filtering) - marker_invalid - result_changed * 0.3, 0.0);
                        omw_FragColor = vec4(ssao_final * (1.0 - temporal_factor) + last.x * temporal_factor, marker, 0.0, 1.0);
                        return;
                    }
                }
            }
        }

        omw_FragColor = vec4(ssao / total, marker, 0.0, 1.0);
    }
}

fragment copy(target = ao_next, rt1 = ao_buf0) {
    omw_In vec2 omw_TexCoord;

    void main() {
        omw_FragColor = vec4(omw_Texture2D(ao_buf0, omw_TexCoord).xy, 0.0, 1.0);
    }
}

fragment blur_v(target = ao_buf1, rt1 = ao_buf0) {
    omw_In vec2 omw_TexCoord;

    void main()
    {
        // No need to continue, blurring skips intermediate buffers
        if (cfg_blur_factor == 0.0) {
             omw_FragColor = vec4(vec3(omw_Texture2D(ao_buf0, omw_TexCoord).x), 1.0);
        } else {
            float ssao = 0.0;
            for(int i = 0; i < N; i ++) {
                ssao += omw_Texture2D(ao_buf0, omw_TexCoord + vec2(0.0, rcpResolution.y * taps[i])).x * kernel[i];
            }
            omw_FragColor = vec4(vec3(ssao), 1.0);
        }
    }
}

fragment blur_h(target = ao_buf0, rt1 = ao_buf1) {
    omw_In vec2 omw_TexCoord;

    void main()
    {
        // No need to continue, blurring skips intermediate buffers
        if (cfg_blur_factor == 0.0) {
             omw_FragColor = vec4(vec3(omw_Texture2D(ao_buf1, omw_TexCoord).x), 1.0);
        } else {
            float ssao = 0.0;
            for(int i = 0; i < N; i ++) {
                ssao += omw_Texture2D(ao_buf1, omw_TexCoord + vec2(rcpResolution.x * taps[i], 0.0)).x * kernel[i];
            }
            omw_FragColor = vec4(vec3(ssao), 1.0);
        }
    }
}

fragment combine(rt1 = ao_buf0) {
    omw_In vec2 omw_TexCoord;

    void main() {
        vec4 old_col;
        if (cfg_debug && cfg_enabled) {
            old_col.rgb = vec3(1.0);
        } else {
            old_col = omw_GetLastShader(omw_TexCoord);
            if (OMW_NORMALS != 1) {
                omw_FragColor = old_col * vec4(1.0, 0.0, 0.0, 1.0);
                return;
            }
        }

        float ssao = omw_Texture2D(ao_buf0, omw_TexCoord).x;

        if (!cfg_enabled) {
            ssao = 1.0;
        }

        old_col.rgb *= mix(smoothstep(0.0, 1.0, pow(ssao, cfg_intensity)), 1.0, omw_EstimateFogCoverageFromUV(omw_TexCoord));

        /* old_col.rgb = norm_at(omw_TexCoord); */

        omw_FragColor = old_col;
    }

    // passes = ssao, copy, blur_v, blur_h, combine;
}

technique {
    passes = ssao, copy, blur_v, blur_h, combine;
    version = "0.1";
    description = "Screen-space ambient occlusion for OpenMW. This mod is normal-aware, so make sure to install a normal map mod to get the best out of it.";
    author = "zesterer";
    pass_normals = true;
}
