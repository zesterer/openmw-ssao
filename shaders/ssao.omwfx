uniform_float cfg_intensity {
    header = "Parameters";
    default = 4.5;
    min = 0.0;
    max = 20.0;
    step = 0.1;
    display_name = "Intensity";
    description = "Determines the strength of the effect. Higher values make occlusion more blotchy and artificial.";
}

uniform_int cfg_samples {
    default = 30;
    min = 5;
    max = 400;
    step = 1;
    display_name = "Max Samples";
    description = "The maximum number of samples taken per-pixel to determine occlusion. More samples means less visual noise, but worse performance.";
}

uniform_float cfg_radius {
    default = 65.0;
    min = 2.0;
    max = 400.0;
    step = 1.0;
    display_name = "Radius";
    description = "Controls the radius of occlusion effects. Higher values result in fuller and more context-sensitive shadows, at the cost of more noise.";
}

uniform_float cfg_threshold {
    default = 0.0;
    min = -0.15;
    max = 0.15;
    step = 0.01;
    display_name = "Occlusion Threshold";
    description = "The approximate occlusion threshold at which shadowing begins to occur. Lower values cause surfaces without any occlusion to become occluded.";
}

uniform_float cfg_normal_intensity {
    default = 1.0;
    min = 0.0;
    max = 1.0;
    step = 0.05;
    display_name = "Normal Adjustment";
    description = "How strongly surface normals contribute to the occlusion effect. You might want to reduce this setting in the presence of overly strong normal maps.";
}

uniform_float cfg_depth_compensation {
    default = 2.5;
    min = 0.0;
    max = 5.0;
    step = 0.1;
    display_name = "Depth Compensation";
    description = "The extent to which occlusion is affected by the relative depth of the occluding surface. Lower values produce 'occlusion halos' typical of poor early SSAO implementations.";
}

uniform_float cfg_blur_factor {
    default = 1.0;
    min = 0.0;
    max = 1.5;
    step = 0.1;
    display_name = "Blur";
    description = "The amount of blurring applied to the occlusion to reduce visual noise, at the cost of sharpness. Lower values mean more precise occlusion, but increased visual noise.";
}

uniform_float cfg_temporal_filtering {
    default = 0.75;
    min = 0.0;
    max = 1.0;
    step = 0.1;
    display_name = "Temporal Filtering";
    description = "The amount of AO sampling information reused from previous frames. Higher values improve both AO quality and performance at the cost of minor artifacts on moving scene elements.";
}

uniform_bool cfg_enable_hands {
    header = "Options";
    default = true;
    display_name = "Apply to Hands";
    description = "Whether ambient occlusion is applied to hands.";
}

uniform_bool cfg_enabled {
    header = "Debugging";
    default = true;
    display_name = "Enabled";
    description = "Whether the effect is enabled. Useful for quick comparisons. If you want to permanently remove the effect, disable the whole shader instead of using this option since it only skips applying occlusion, not the calculation of occlusion.";
}

uniform_bool cfg_debug {
    default = false;
    display_name = "Debug View";
    description = "Makes it easier to see the effect of your configuration changes on the occlusion by removing other lighting effects.";
}

uniform_bool cfg_debug_blend {
    default = false;
    display_name = "View Blend";
    description = "View the blending factor that controls reuse of temporal information from previous frames.";
}

uniform_bool cfg_debug_marker {
    default = false;
    display_name = "View Marker";
    description = "View the world position marker used to perform rejection of temporal information.";
}

uniform_bool cfg_debug_samples {
    default = false;
    display_name = "View Samples";
    description = "View the number of samples (as a proportion of 'Max Samples') performed per-pixel during the last frame. Black = 0%, white = 100%.";
}

uniform_bool cfg_temporal_filter_when_paused {
    default = false;
    display_name = "Temporal Filter When Paused";
    description = "Enabled temporal filtering even when the game is paused. This has a very minor constant performance overhead.";
}

sampler_2d noise {
    source = "textures/noise.png";
    mag_filter = linear;
    min_filter = linear;
    wrap_s = repeat;
    wrap_t = repeat;
    source_format = rg;
    internal_format = rg;
    source_type = unsigned_byte;
}

render_target ao_buf0 {
    min_filter = linear;
    mag_filter = linear;
    wrap_s = clamp_to_edge;
    wrap_t = clamp_to_edge;
    width_ratio = 1.0;
    height_ratio = 1.0;
    internal_format = rgb;
    source_type = float;
    source_format = rgb;
    mipmaps = false;
}

render_target ao_buf1 {
    min_filter = linear;
    mag_filter = linear;
    wrap_s = clamp_to_edge;
    wrap_t = clamp_to_edge;
    width_ratio = 1.0;
    height_ratio = 1.0;
    internal_format = red;
    source_type = float;
    source_format = red;
    mipmaps = false;
}

render_target ao_next {
    min_filter = linear;
    mag_filter = linear;
    wrap_s = clamp_to_edge;
    wrap_t = clamp_to_edge;
    width_ratio = 1.0;
    height_ratio = 1.0;
    internal_format = rgb;
    source_type = float;
    source_format = rgb;
    mipmaps = false;
}

shared {
    const float UPSCALE = 1.0;
    const float UPSCALE_INV = 1.0 / UPSCALE;

    /* const int N = 7; */
    /* const float kernel[N] = float[](0.0016,    0.0372,    0.2394,    0.4436,    0.2394,    0.0372,    0.0016); */
    /* const float taps[N] = float[](-3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0); */

    /* const int N = 7; */
    /* const float kernel[N] = float[](0.0713,    0.1315,    0.1899,    0.2146,    0.1899,    0.1315,    0.0713); */
    /* const float taps[N] = float[](-3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0); */

    const int N = 5;
    const float kernel[N] = float[](0.1693, 0.2146, 0.2322, 0.2146, 0.1693);
    const float taps[N] = float[](-2.0, -1.0, 0.0, 1.0, 2.0);

    /* const int N = 3; */
    /* const float kernel[N] = float[](0.3195,    0.3611,    0.3195); */
    /* const float taps[N] = float[](-1.0, 0.0, 1.0); */

    const int BOX = 8;
    const float boxx[8] = float[](-1.0,  1.0, -1.0, 1.0, -1.0,  1.0, 0.0, 0.0);
    const float boxy[8] = float[](-1.0, -1.0,  1.0, 1.0, 0.0,  0.0, -1.0, 1.0);

    /* const int N = 9; */
    /* const float kernel[N] = float[](0.0002, 0.0060, 0.0606, 0.2417, 0.3829, 0.2417, 0.0606, 0.0060, 0.0002); */
    /* const float taps[N] = float[](-4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0); */

    vec2 rcpResolution = omw.rcpResolution * cfg_blur_factor;

    vec3 norm_at(vec2 uv) {
        return (omw_Texture2D(omw_SamplerNormals, uv).xyz - 0.5) * 2.0;
    }

    float nonan(float x, float els) { return (abs(x + 0.01 - x) < 0.1) ? x : els; }
    vec3 nonan(vec3 x, vec3 els) { return (dot(abs(x + 0.01 - x), vec3(1.0)) < 0.1) ? x : els; }

    #define M1 204766743
    #define M2 388370683
    #define M3 396128171

    float hash_one(int q) {
        int n = ((M3 * q) ^ M2) * M1;
        return float(n) * (1.0 / float(0xffffffffu));
    }
    vec4 hash_one4(ivec4 q) {
        ivec4 n = ((M3 * q) ^ M2) * M1;
        return vec4(n) * (1.0 / float(0xffffffffu));
    }

    float hash_two(uvec2 q) {
        q *= uvec2(M1, M2);
        uint n = q.x ^ q.y;
        n = n * (n ^ (n >> 15));
        return float(n) * (1.0 / float(0xffffffffU));
    }

    vec2 noise_3d(vec3 pos) {
        pos.z *= 25.0;
        int z = int(floor(pos.z));
        vec4 offs = hash_one4(ivec4(z, z + 73, z + 1, z + 74));
        return mix(
            omw_Texture2D(noise, pos.xy + offs.xy).xy,
            omw_Texture2D(noise, pos.xy + offs.zw).xy,
            fract(pos.z)
        );
    }
}

fragment ssao(target = ao_buf0, rt1 = ao_next, blend = (add, one, zero)) {
    omw_In vec2 omw_TexCoord;

    vec2 norm2_at(vec2 uv) {
        return vec2(omw_Texture2D(omw_SamplerNormals, uv).xy - 0.5) * 2.0;
    }

    float vmax(vec2 v) { return max(v.x, v.y); }

    void main() {
        float depth = omw_GetLinearDepth(omw_TexCoord);
        float inv_depth = 1.0 / (depth + 0.0001);
        float dist_mul = cfg_radius / (10.0 + pow(depth, 0.75) * 0.2);
        vec3 norm = norm_at(omw_TexCoord);

        //vec4 old_col = omw_GetLastShader(omw_TexCoord);
        vec3 wpos = omw_GetWorldPosFromUV(omw_TexCoord);
        vec3 wnorm = (omw.invViewMatrix * vec4(norm, 0.0)).xyz;
        /* float marker_d = distance(wpos, omw.eyePos.xyz) * 0.001 + 3.0; */
        /* vec2 marker = mix( */
        /*     noise_3d((wpos * 0.003) ),/// floor(marker_d)), */
        /*     noise_3d((wpos * 0.003) ),/// floor(marker_d + 1.0)), */
        /*     fract(marker_d) */
        /* ) * 0.2 + 0.75; */

        vec3 to_wpos = normalize(wpos - omw.eyePos.xyz);
        vec2 marker = vec2(
            dot(sin(wpos.xyz * 0.075), vec3(1.0)),
            dot(sin(wpos.xyz * 0.075 + 3.1416), vec3(1.0))
        ) * 0.075 + 0.75;//noise_3d(wpos * 0.003 * marker_scale) * 0.4 + 0.6;

        float temporal_factor = pow(cfg_temporal_filtering, 0.1);

        float ssao = 0.0;
        float last_ssao = 0.0;
        float blend_factor = 0.0;
        float borrow = 0.0;
        vec3 last = vec3(0.0);
        int samples = 0;
        // Always apply AO in interiors, and not on the skybox
        if (!omw.isInterior && (depth > omw.far * 0.99
            // AO shouldn't appear underwater if the camera is above water
            || (wpos.z < omw.waterHeight + 1.0 && !omw.isUnderwater)
            // AO shouldn't appear above water if the camera is underwater
            || (wpos.z > omw.waterHeight - 1.0 && omw.isUnderwater)))
        {
            ssao = 1.0;
        } else {
            samples = cfg_samples;
            if (true/*cfg_temporal_filtering > 0.0*/) {
                vec4 prev_spos = (omw.projectionMatrix * (omw.prevViewMatrix * vec4(wpos, 1.0)));
                prev_spos.xyz /= prev_spos.w;

                if (abs(prev_spos.x) < 1.0 && abs(prev_spos.y) < 1.0) {
                    last = omw_Texture2D(ao_next, prev_spos.xy * 0.5 + 0.5).xyz;

                    // If the marker was substantially out of range, try to repair the missing information by
                    // 'borrowing' from nearby pixels
                    /* if (vmax(abs(last.yz - marker)) * inv_depth > 0.0001) { */
                    /*     borrow = 1.0; */
                    /*     for (int i = 0; i < BOX; i ++) { */
                    /*         vec3 last2 = omw_Texture2D(ao_next, prev_spos.xy * 0.5 + 0.5 + omw.rcpResolution * UPSCALE_INV * vec2(boxx[i], boxy[i])).xyz; */
                    /*         if (vmax(abs(last2.yz - marker)) < vmax(abs(last.yz - marker))) { last = last2; } */
                    /*     } */
                    /* } */
                    last_ssao = last.x;
                    blend_factor = temporal_factor / (1.0 + max(0.0, vmax(abs(last.yz - marker)) * inv_depth - 0.000001) * 1000000.0);
                    samples = int(float(cfg_samples) * max(1.0 - blend_factor * 0.9, 0.0));
                }
            }

            float t = hash_two(uvec2(omw_TexCoord * omw.resolution)) * 6.28318;
            if (true /*cfg_temporal_filtering > 0.0*/) { t += fract(omw.simulationTime * t) * 6.28318; }
            if (cfg_temporal_filter_when_paused) { t += omw_Texture2D(ao_next, omw_TexCoord).x * 10.0; }
            float total = 0.0;
            for (int i = 0; i <= samples; i ++) {
                float dist = 0.01 + fract(t * 22.8);
                vec2 offs = sin(vec2(0.0, 1.5707960) + t) * 0.01 * dist * dist_mul;
                vec2 pos = omw_TexCoord + offs;

                float depth2 = omw_GetLinearDepth(pos);
                vec2 norm2 = norm2_at(pos);
                float ignore = min(abs(1.0 - depth2 * inv_depth) * sqrt(depth) * 0.1 * cfg_depth_compensation, 1.0);
                float weight = 1.0;// - dist * ignore;
                ssao += weight * mix(0.01 / (0.01 + max(dot((norm.xy - norm2), offs), 0.0) * cfg_normal_intensity) + cfg_threshold, 1.0, ignore);
                total += weight;
                t += 3.88;
            }
            ssao /= total + 0.0001;
            //ssao = clamp(ssao * mix(0.9, 1.0, max(dot(wnorm, omw.sunPos.xyz), 0.0)), 0.0, 1.0);

            if (!cfg_debug_blend) {
                // Reject samples when our new sampling differs substantially from the existing values (helps to eliminate ghosts)
                float reject_changed = max(0.0, 1.0 - max(0.0, (ssao - last_ssao) / (last_ssao + 0.001) - 0.1) * 1000.0 * 0.025 * sqrt(inv_depth));
                blend_factor *= reject_changed;
            }
        }

        if (!cfg_enable_hands && depth < 40.0) {
            ssao = smoothstep(1.0, ssao, min(depth * (1.0 / 60.0), 1.0));
        }

        if (cfg_debug_blend) {
            ssao = blend_factor;
            blend_factor = 0.0;
        } else if (cfg_debug_marker) {
            ssao = marker.x;
            blend_factor = 0.0;
        } else if (cfg_debug_samples) {
            ssao = float(samples) / float(cfg_samples);
            blend_factor = 0.0;
        }
        omw_FragColor = vec4(ssao * (1.0 - blend_factor) + last_ssao * blend_factor, marker, inv_depth);
    }
}

fragment copy(target = ao_next, rt1 = ao_buf0, blend = (add, one, zero)) {
    omw_In vec2 omw_TexCoord;

    void main() {
        omw_FragColor = omw_Texture2D(ao_buf0, omw_TexCoord);
    }
}

fragment depth_adjusted_blur(target = ao_buf1, rt1 = ao_buf0, blend = (add, one, zero)) {
    omw_In vec2 omw_TexCoord;

    const int M = 12;
    vec2 offsets[M] = vec2[](
        vec2(-0.695914,0.457137), vec2(-0.203345,0.620716),
        vec2(0.96234,-0.194983), vec2(0.473434,-0.480026),
        vec2(0.507431,0.064425), vec2(0.89642,0.412458),
        vec2(-0.32194,-0.932615), vec2(-0.791559,-0.59771),
        vec2(-0.326212,-0.40581), vec2(-0.840144,-0.07358),
        vec2(0.519456,0.767022), vec2(0.185461,-0.893124)
    );

    void main()
    {
        float total = omw_Texture2D(ao_buf0, omw_TexCoord).x;
        float depth = omw_GetLinearDepth(omw_TexCoord);
        float inv_depth = 1.0 / depth;
        float rev = 4.0;/*blur_radius*/;
        float amount = 1.0;
        for (int i = 0; i < M; i++) {
            vec2 s_uv = omw_TexCoord + rcpResolution * offsets[i] * rev;
            float s_depth = omw_GetLinearDepth(s_uv);
            float weight = exp2(-abs(depth - s_depth) * inv_depth * 50.0/*blur_falloff*/) * cfg_blur_factor;

            amount += weight;
            total += omw_Texture2D(ao_buf0, s_uv).x * weight;
        }

        omw_FragColor = vec4(total / amount, 0.0, 0.0, 1.0);
    }
}

fragment combine(rt1 = ao_buf1, blend = (add, one, zero)) {
    omw_In vec2 omw_TexCoord;

    void main() {
        vec4 old_col;
        if (cfg_debug && cfg_enabled) {
            old_col.rgb = vec3(1.0);
        } else {
            old_col = omw_GetLastShader(omw_TexCoord);
            if (OMW_NORMALS != 1) {
                omw_FragColor = old_col * vec4(1.0, 0.0, 0.0, 1.0);
                return;
            }
        }

        float ssao = omw_Texture2D(ao_buf1, omw_TexCoord).x;

        if (!cfg_enabled) {
            ssao = 1.0;
        }

        old_col.rgb *= mix(smoothstep(0.0, 1.0, pow(ssao, cfg_intensity)), 1.0, omw_EstimateFogCoverageFromUV(omw_TexCoord));
        /* old_col.rgb = vec3(noise_3d(vec3(omw_TexCoord.xyx) * 10.0), 1); */

        /* old_col.rgb = norm_at(omw_TexCoord); */

        omw_FragColor = old_col;
    }
}

technique {
    passes = ssao, copy, depth_adjusted_blur, combine;
    version = "0.1";
    description = "Screen-space ambient occlusion for OpenMW. This mod is normal-aware, so make sure to install a normal map mod to get the best out of it.";
    author = "zesterer";
    pass_normals = true;
}
